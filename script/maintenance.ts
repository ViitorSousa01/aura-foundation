import { execSync } from "child_process";
import { promisify } from "util";
import * as fs from "fs";
import * as path from "path";

// Fun√ß√£o que executa comandos e retorna o resultado
const runCommand = (command: string): Promise<string> => {
  return new Promise((resolve, reject) => {
    try {
      console.log(`üîß Executando: ${command}`);
      const result = execSync(command, { stdio: "pipe" }).toString();
      resolve(result);
    } catch (error) {
      reject(error);
    }
  });
};

// Fun√ß√£o que realiza a manuten√ß√£o
const runMaintenance = async () => {
  try {
    console.log("\nüöÄ Iniciando manuten√ß√£o do frontend...\n");

    // Refatorar C√≥digo
    console.log("‚öôÔ∏è Executando ESLint...");
    await runCommand("npm run lint");

    // Formatar C√≥digo
    console.log("üñãÔ∏è Formatando c√≥digo com Prettier...");
    await runCommand("npm run prettier");

    // Testar C√≥digo
    console.log("üß™ Executando testes...");
    await runCommand("npm run test");

    // Verificar Acessibilidade
    console.log("‚ôø Verificando acessibilidade com Axe...");
    await runCommand("npx axe http://localhost:3000");

    // Analisar Performance
    console.log("‚ö° Analisando performance com Lighthouse...");
    await runCommand("npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json");

    console.log("\n‚úÖ Manuten√ß√£o conclu√≠da com sucesso!");

    // Cria√ß√£o de relat√≥rios e logs de execu√ß√£o
    await generateLogs();

  } catch (error) {
    console.error("\n‚ùå Erro na execu√ß√£o da manuten√ß√£o:", error);
    process.exit(1);
  }
};

// Fun√ß√£o para gerar um arquivo de log de execu√ß√£o
const generateLogs = async () => {
  try {
    const logContent = `
      Manuten√ß√£o do Frontend:
      - ESLint: Conclu√≠do
      - Prettier: Conclu√≠do
      - Testes: Conclu√≠dos
      - Acessibilidade: Verificada
      - Performance: Analisada (Relat√≥rio gerado em ./lighthouse-report.json)
    `;

    const logFilePath = path.resolve(__dirname, "maintenance-log.txt");
    fs.writeFileSync(logFilePath, logContent, { encoding: "utf-8" });
    console.log(`üìÑ Log de execu√ß√£o gerado em: ${logFilePath}`);

  } catch (error) {
    console.error("Erro ao gerar o log:", error);
  }
};

// Fun√ß√£o principal com execu√ß√£o paralela onde poss√≠vel
const main = async () => {
  try {
    await runMaintenance();
  } catch (error) {
    console.error("Erro ao executar a manuten√ß√£o:", error);
    process.exit(1);
  }
};

main();
